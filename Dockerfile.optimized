# STS Neural Agent - Optimized Docker Image with Multi-Stage Build
# This version maximizes Docker layer caching for faster rebuilds

# ================================
# Stage 1: Build sts_lightspeed C++ engine
# ================================
FROM pytorch/pytorch:latest AS cpp-builder

# Install only build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# Copy only C++ source files and build configuration
COPY sts_lightspeed/include/ sts_lightspeed/include/
COPY sts_lightspeed/src/ sts_lightspeed/src/
COPY sts_lightspeed/apps/ sts_lightspeed/apps/
COPY sts_lightspeed/bindings/ sts_lightspeed/bindings/
COPY sts_lightspeed/json/ sts_lightspeed/json/
COPY sts_lightspeed/pybind11/ sts_lightspeed/pybind11/
COPY sts_lightspeed/CMakeLists.txt sts_lightspeed/CMakeLists.txt

# Build the C++ extension (this layer caches unless C++ code changes)
RUN cd sts_lightspeed && \
    cmake -DPYTHON_EXECUTABLE=$(which python) . && \
    make -j$(nproc) && \
    echo "✅ sts_lightspeed built successfully"

# ================================
# Stage 2: Python environment setup  
# ================================
FROM pytorch/pytorch:latest AS python-base

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV WANDB_CACHE_DIR=/app/wandb_cache

# Install runtime dependencies (minimal set)
RUN apt-get update && apt-get install -y \
    curl \
    vim \
    tmux \
    htop \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy and install Python requirements (caches unless requirements change)
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# ================================
# Stage 3: Final application image
# ================================
FROM python-base AS final

# Copy the built C++ extension from the builder stage
COPY --from=cpp-builder /build/sts_lightspeed/ sts_lightspeed/

# Copy setup.py for package installation
COPY setup.py .

# Install the package (attempt to copy module to site-packages)
RUN pip install -e . || echo "Package install attempted - fallback to path-based import"

# Copy Python source code (most frequently changed - put last)
COPY sts_*.py ./
COPY train_sts_agent.py ./
COPY setup_wandb.py ./
COPY test*.py ./
COPY analyze_rewards.py ./
COPY simple_reward_analysis.py ./
COPY run_sts_lightspeed.py ./

# Copy any additional files that might be needed
COPY install_module.py ./

# Create directories for outputs
RUN mkdir -p /app/sts_models /app/wandb_cache /app/logs

# Set Python path as fallback
ENV PYTHONPATH=/app

# Create non-root user for security
RUN useradd -m -u 1000 trainer && \
    chown -R trainer:trainer /app
USER trainer

# Test that everything works
RUN python -c "import sys; sys.path.insert(0, 'sts_lightspeed'); import slaythespire; print('✅ sts_lightspeed import test successful')"

# Expose port for Jupyter (if needed)
EXPOSE 8888

# Default command
CMD ["python", "train_sts_agent.py", "train", "--episodes", "1000", "--wandb"]